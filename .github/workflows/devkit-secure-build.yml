name: DevKit Secure Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  DOCKER_CONTENT_TRUST: 1

jobs:
  secure-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For keyless signing
      security-events: write # For uploading security results
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install DevKit
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -e .
          echo "$HOME/.venv/bin" >> $GITHUB_PATH
          
      - name: Install Security Tools
        run: |
          # Install cosign
          curl -fsSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/
          
          # Install syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and Test
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2)
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse --short HEAD)
          
          # Build
          devkit docker build \
            --name devkit \
            --dockerfile Dockerfile \
            --platform linux/amd64 \
            --build-arg VERSION=$VERSION \
            --build-arg BUILD_DATE=$BUILD_DATE \
            --build-arg VCS_REF=$VCS_REF
            
          # Test
          devkit docker test devkit:$VERSION --command "version current"
          devkit docker test devkit:$VERSION --command "--help"
          
      - name: Scan for vulnerabilities
        id: scan
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2)
          mkdir -p reports
          
          # Use devkit scan with JSON output
          devkit docker scan devkit:$VERSION --output json > reports/scan-results.json
          
          # Check for critical vulnerabilities
          CRITICAL_COUNT=$(grep -c "CRITICAL" reports/scan-results.json || echo "0")
          echo "critical_count=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "::warning::Found ${CRITICAL_COUNT} critical vulnerabilities!"
          fi
          
      - name: Generate SBOM
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2)
          mkdir -p sboms
          syft devkit:$VERSION -o spdx-json > sboms/devkit-$VERSION.sbom.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sboms/
          
      - name: Tag and Push
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2)
          
          # Tag with semantic versions
          devkit docker tag devkit:$VERSION ghcr.io/${{ github.repository }}/devkit:$VERSION
          devkit docker tag devkit:$VERSION ghcr.io/${{ github.repository }}/devkit:latest
          
          # Push to registry
          docker push ghcr.io/${{ github.repository }}/devkit:$VERSION
          docker push ghcr.io/${{ github.repository }}/devkit:latest
          
      - name: Sign the image
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2)
          cosign sign ghcr.io/${{ github.repository }}/devkit:$VERSION
          cosign sign ghcr.io/${{ github.repository }}/devkit:latest
          
      - name: Fail on critical vulnerabilities
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && steps.scan.outputs.critical_count > 0 }}
        run: |
          echo "::error::Critical vulnerabilities found - failing the build"
          exit 1
          
      - name: Generate usage examples
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "## Usage Examples for DevKit Docker Image" > DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### Basic Usage" >> DOCKER_EXAMPLES.md
          echo '```bash' >> DOCKER_EXAMPLES.md
          echo "docker run --rm ghcr.io/${{ github.repository }}/devkit:latest --help" >> DOCKER_EXAMPLES.md
          echo '```' >> DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### Security Information" >> DOCKER_EXAMPLES.md
          echo "This image:" >> DOCKER_EXAMPLES.md
          echo "- Runs as a non-root user" >> DOCKER_EXAMPLES.md
          echo "- Is signed with Cosign (verify with: cosign verify ghcr.io/${{ github.repository }}/devkit:latest)" >> DOCKER_EXAMPLES.md
          echo "- Includes SBOM" >> DOCKER_EXAMPLES.md
          echo "- Is scanned for vulnerabilities" >> DOCKER_EXAMPLES.md
          
      - name: Upload examples
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: docker-examples
          path: DOCKER_EXAMPLES.md 