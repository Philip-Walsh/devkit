name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Use native BuildKit implementation
  DOCKER_BUILDKIT: 1
  # Disable pass-through of host variables to build
  DOCKER_CONTENT_TRUST: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Full git history for VCS reference
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata and version
        id: meta
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2 || echo "0.0.0")
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "vcs_ref=${VCS_REF}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          push: false
          tags: devkit-test:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.build_date }}
            VCS_REF=${{ steps.meta.outputs.vcs_ref }}

      - name: Test image
        run: |
          docker run --rm devkit-test:${{ steps.meta.outputs.version }} version current
          docker run --rm devkit-test:${{ steps.meta.outputs.version }} --help
      
      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devkit-test:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build yet, we'll analyze results

      - name: Analyze vulnerability scan
        id: vuln_check
        run: |
          CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results.sarif || echo "0")
          HIGH_COUNT=$(grep -c "HIGH" trivy-results.sarif || echo "0")
          echo "critical_count=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
          echo "high_count=${HIGH_COUNT}" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "::warning::Found ${CRITICAL_COUNT} critical vulnerabilities!"
          fi
          
          # Only fail on critical vulnerabilities in production builds
          if [ "$CRITICAL_COUNT" -gt "0" ] && [ "${{ github.ref }}" = "refs/heads/main" -o "${{ startsWith(github.ref, 'refs/tags/v') }}" = "true" ]; then
            exit 1
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: devkit-test:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  publish:
    needs: build-and-test
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for keyless signing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=secure,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Get version info
        id: version
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2 || echo "0.0.0")
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=$(git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "vcs_ref=${VCS_REF}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
            VCS_REF=${{ steps.version.outputs.vcs_ref }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true # generates provenance attestation
          sbom: true # generates SBOM attestation

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the image with Cosign keyless
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} | cut -d'@' -f2)
          cosign sign ghcr.io/${{ github.repository }}@${DIGEST}

  # Example of the published image
  examples:
    needs: publish
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Generate usage examples
        run: |
          echo "## Usage Examples for DevKit Docker Image" > DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### Basic Usage" >> DOCKER_EXAMPLES.md
          echo '```bash' >> DOCKER_EXAMPLES.md
          echo "docker run --rm ghcr.io/${{ github.repository }}:latest --help" >> DOCKER_EXAMPLES.md
          echo '```' >> DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### With Environment Variables" >> DOCKER_EXAMPLES.md
          echo '```bash' >> DOCKER_EXAMPLES.md
          echo "docker run --rm -e CONFIG_PATH=/config/myconfig.yaml ghcr.io/${{ github.repository }}:latest" >> DOCKER_EXAMPLES.md
          echo '```' >> DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### Mounting Volumes" >> DOCKER_EXAMPLES.md
          echo '```bash' >> DOCKER_EXAMPLES.md
          echo "docker run --rm -v \$(pwd):/workspace ghcr.io/${{ github.repository }}:latest" >> DOCKER_EXAMPLES.md
          echo '```' >> DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "### Security Information" >> DOCKER_EXAMPLES.md
          echo "This image:" >> DOCKER_EXAMPLES.md
          echo "- Runs as a non-root user" >> DOCKER_EXAMPLES.md
          echo "- Is signed with Cosign" >> DOCKER_EXAMPLES.md
          echo "- Includes SBOM (Software Bill of Materials)" >> DOCKER_EXAMPLES.md
          echo "- Is scanned for vulnerabilities" >> DOCKER_EXAMPLES.md
          echo "" >> DOCKER_EXAMPLES.md
          echo "To verify signature:" >> DOCKER_EXAMPLES.md
          echo '```bash' >> DOCKER_EXAMPLES.md
          echo "cosign verify ghcr.io/${{ github.repository }}:latest" >> DOCKER_EXAMPLES.md
          echo '```' >> DOCKER_EXAMPLES.md
          
      - name: Upload examples
        uses: actions/upload-artifact@v3
        with:
          name: docker-examples
          path: DOCKER_EXAMPLES.md 