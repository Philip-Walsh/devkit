name: CD Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.date }}
            VCS_REF=${{ steps.meta.outputs.commit }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          PREVIOUS_TAG=$(git tag -l "v*" | grep -v "$VERSION" | sort -V | tail -n 1 || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGES=$(git log --pretty=format:"* %s" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGES=$(git log --pretty=format:"* %s")
          fi
          
          {
            echo "## DevKit v${VERSION}"
            echo ""
            echo "### Changes"
            echo ""
            echo "$CHANGES"
            echo ""
            echo "### Docker Image"
            echo ""
            echo "```bash"
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
            echo "```"
          } > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: DevKit v${{ github.ref_name }}
          body_path: release_notes.md 