name: Daily Security Rebuild

on:
  schedule:
    # Run daily at 2:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no updates are found'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  DOCKER_CONTENT_TRUST: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      python_version: ${{ steps.get_python_version.outputs.python_version }}
      base_image_digest: ${{ steps.get_digests.outputs.base_image_digest }}
      chainguard_digest: ${{ steps.get_digests.outputs.chainguard_digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get Python version and base images
        id: get_python_version
        run: |
          # Extract Python version from Dockerfile
          PYTHON_VERSION=$(grep -m 1 "FROM python:" Dockerfile | grep -o "[0-9]\+\.[0-9]\+" || echo "3.9")
          echo "python_version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "Using Python version: ${PYTHON_VERSION}"
      
      - name: Get base image digests
        id: get_digests
        run: |
          # Pull and get digest of Python base image
          docker pull python:${{ steps.get_python_version.outputs.python_version }}-slim
          BASE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' python:${{ steps.get_python_version.outputs.python_version }}-slim)
          echo "base_image_digest=${BASE_DIGEST}" >> $GITHUB_OUTPUT
          
          # Pull and get digest of Chainguard image
          docker pull cgr.dev/chainguard/python:latest
          CG_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' cgr.dev/chainguard/python:latest)
          echo "chainguard_digest=${CG_DIGEST}" >> $GITHUB_OUTPUT
          
      - name: Check for updates
        id: check_updates
        run: |
          # Check for security updates in base OS
          apt update
          SECURITY_UPDATES=$(apt list --upgradable 2>/dev/null | grep -i security || echo "")
          
          # Check for new Python package versions
          pip list --outdated | tee pip_outdated.txt
          
          # Decide if we should rebuild based on findings
          if [ -n "$SECURITY_UPDATES" ] || [ -s pip_outdated.txt ] || [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates found or forced rebuild requested, will trigger rebuild"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No updates found, skipping rebuild"
          fi
          
          # Save update info for the build job
          echo "$SECURITY_UPDATES" > security_updates.txt
          
      - name: Upload update info
        uses: actions/upload-artifact@v3
        with:
          name: update-info
          path: |
            security_updates.txt
            pip_outdated.txt

  rebuild-and-publish:
    needs: check-for-updates
    if: ${{ needs.check-for-updates.outputs.has_updates == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For keyless signing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Download update info
        uses: actions/download-artifact@v3
        with:
          name: update-info
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Get current version
        id: version
        run: |
          VERSION=$(grep version setup.py | cut -d'"' -f2 || echo "0.0.0")
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          SECURITY_BUILD="${VERSION}-security.$(date -u +'%Y%m%d')"
          VCS_REF=$(git rev-parse --short HEAD)
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "security_version=${SECURITY_BUILD}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "vcs_ref=${VCS_REF}" >> $GITHUB_OUTPUT
          echo "Using version: ${SECURITY_BUILD}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build security scan
        id: scan_build
        run: |
          echo "Building security scan report..."
          {
            echo "## Daily Security Update: $(date -u +'%Y-%m-%d')"
            echo ""
            
            echo "### Base Image Updates"
            echo "- Python base image: ${{ needs.check-for-updates.outputs.base_image_digest }}"
            echo "- Chainguard image: ${{ needs.check-for-updates.outputs.chainguard_digest }}"
            echo ""
            
            echo "### System Security Updates"
            if [ -s security_updates.txt ]; then
              echo '```'
              cat security_updates.txt
              echo '```'
            else
              echo "No security updates found"
            fi
            echo ""
            
            echo "### Python Dependencies Updates"
            if [ -s pip_outdated.txt ]; then
              echo '```'
              cat pip_outdated.txt
              echo '```'
            else
              echo "No outdated Python packages found"
            fi
          } > security_update_report.md
          
          cat security_update_report.md

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.security_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure
          labels: |
            org.opencontainers.image.created=${{ steps.version.outputs.build_date }}
            org.opencontainers.image.revision=${{ steps.version.outputs.vcs_ref }}
            org.opencontainers.image.version=${{ steps.version.outputs.security_version }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            security.devkit.rebuild=daily
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
            VCS_REF=${{ steps.version.outputs.vcs_ref }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Sign images
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign all the tags we pushed
          cosign sign --yes "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.security_version }}"
          cosign sign --yes "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:secure"
          echo "âœ… Images signed"

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.security_version }}
          format: 'table'
          output: trivy-results.txt
          exit-code: '0'  # Don't fail on vulnerabilities, we're already publishing security updates

      - name: Create security report issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "Daily Security Update: ${{ steps.version.outputs.security_version }}"
          content-filepath: ./security_update_report.md
          labels: security, automated
          assignees: ${{ github.repository_owner }} 